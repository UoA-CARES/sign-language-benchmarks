2022-12-10 11:14:08,863 - mmaction - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.15 (default, Nov 24 2022, 15:19:38) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1660 Ti
CUDA_HOME: None
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMAction2: 0.24.1+0ec352d
------------------------------------------------------------

2022-12-10 11:14:08,864 - mmaction - INFO - Distributed training: False
2022-12-10 11:14:09,077 - mmaction - INFO - Config: model = dict(
    type='Recognizer3D',
    backbone=dict(
        type='C3D',
        pretrained=
        'https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth',
        style='pytorch',
        conv_cfg=dict(type='Conv3d'),
        norm_cfg=None,
        act_cfg=dict(type='ReLU'),
        dropout_ratio=0.5,
        init_std=0.005),
    cls_head=dict(
        type='I3DHead',
        num_classes=101,
        in_channels=4096,
        spatial_type=None,
        dropout_ratio=0.5,
        init_std=0.01),
    train_cfg=None,
    test_cfg=dict(average_clips='score'))
dataset_type = 'RawframeDataset'
data_root = 'data/wlasl/rawframes'
data_root_val = 'data/wlasl/rawframes'
split = 1
clip_length = 16
ann_file_train = 'data/wlasl/train_annotations.txt'
ann_file_val = 'data/wlasl/val_annotations.txt'
ann_file_test = 'data/wlasl/test_annotations.txt'
img_norm_cfg = dict(mean=[104, 117, 128], std=[1, 1, 1], to_bgr=False)
train_pipeline = [
    dict(type='SampleFrames', clip_len=16, frame_interval=1, num_clips=1),
    dict(type='RawFrameDecode'),
    dict(type='Resize', scale=(128, 171)),
    dict(type='RandomCrop', size=112),
    dict(type='Flip', flip_ratio=0.5),
    dict(type='Normalize', mean=[104, 117, 128], std=[1, 1, 1], to_bgr=False),
    dict(type='FormatShape', input_format='NCTHW'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs', 'label'])
]
val_pipeline = [
    dict(
        type='SampleFrames',
        clip_len=16,
        frame_interval=1,
        num_clips=1,
        test_mode=True),
    dict(type='RawFrameDecode'),
    dict(type='Resize', scale=(128, 171)),
    dict(type='CenterCrop', crop_size=112),
    dict(type='Normalize', mean=[104, 117, 128], std=[1, 1, 1], to_bgr=False),
    dict(type='FormatShape', input_format='NCTHW'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs', 'label'])
]
test_pipeline = [
    dict(
        type='SampleFrames',
        clip_len=16,
        frame_interval=1,
        num_clips=10,
        test_mode=True),
    dict(type='RawFrameDecode'),
    dict(type='Resize', scale=(128, 171)),
    dict(type='CenterCrop', crop_size=112),
    dict(type='Normalize', mean=[104, 117, 128], std=[1, 1, 1], to_bgr=False),
    dict(type='FormatShape', input_format='NCTHW'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs', 'label'])
]
data = dict(
    videos_per_gpu=16,
    workers_per_gpu=2,
    test_dataloader=dict(videos_per_gpu=1),
    train=dict(
        type='RawframeDataset',
        ann_file='data/wlasl/train_annotations.txt',
        data_prefix='data/wlasl/rawframes',
        pipeline=[
            dict(
                type='SampleFrames',
                clip_len=16,
                frame_interval=1,
                num_clips=1),
            dict(type='RawFrameDecode'),
            dict(type='Resize', scale=(128, 171)),
            dict(type='RandomCrop', size=112),
            dict(type='Flip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[104, 117, 128],
                std=[1, 1, 1],
                to_bgr=False),
            dict(type='FormatShape', input_format='NCTHW'),
            dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
            dict(type='ToTensor', keys=['imgs', 'label'])
        ]),
    val=dict(
        type='RawframeDataset',
        ann_file='data/wlasl/val_annotations.txt',
        data_prefix='data/wlasl/rawframes',
        pipeline=[
            dict(
                type='SampleFrames',
                clip_len=16,
                frame_interval=1,
                num_clips=1,
                test_mode=True),
            dict(type='RawFrameDecode'),
            dict(type='Resize', scale=(128, 171)),
            dict(type='CenterCrop', crop_size=112),
            dict(
                type='Normalize',
                mean=[104, 117, 128],
                std=[1, 1, 1],
                to_bgr=False),
            dict(type='FormatShape', input_format='NCTHW'),
            dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
            dict(type='ToTensor', keys=['imgs', 'label'])
        ]),
    test=dict(
        type='RawframeDataset',
        ann_file='data/wlasl/test_annotations.txt',
        data_prefix='data/wlasl/rawframes',
        pipeline=[
            dict(
                type='SampleFrames',
                clip_len=16,
                frame_interval=1,
                num_clips=10,
                test_mode=True),
            dict(type='RawFrameDecode'),
            dict(type='Resize', scale=(128, 171)),
            dict(type='CenterCrop', crop_size=112),
            dict(
                type='Normalize',
                mean=[104, 117, 128],
                std=[1, 1, 1],
                to_bgr=False),
            dict(type='FormatShape', input_format='NCTHW'),
            dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
            dict(type='ToTensor', keys=['imgs', 'label'])
        ]))
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict(grad_clip=dict(max_norm=40, norm_type=2))
lr_config = dict(policy='step', step=[20, 40])
total_epochs = 45
checkpoint_config = dict(interval=5)
evaluation = dict(
    interval=5, metrics=['top_k_accuracy', 'mean_class_accuracy'])
log_config = dict(
    interval=10,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            init_kwargs=dict(entity='cares', project='wlasl-100-c3d'),
            log_artifact=True)
    ])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/c3d_wlasl_1_rgb/'
load_from = None
resume_from = None
workflow = [('train', 1)]
gpu_ids = range(0, 1)
omnisource = False
module_hooks = []

2022-12-10 11:14:09,077 - mmaction - INFO - Set random seed to 0, deterministic: True
2022-12-10 11:14:09,600 - mmaction - INFO - load model from: https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth
2022-12-10 11:14:09,600 - mmaction - INFO - load checkpoint from http path: https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth
2022-12-10 11:14:14,703 - mmaction - INFO - Start running, host: sttaseen@sttaseen-GS65-Stealth-9SD, work_dir: /home/sttaseen/Desktop/wlasl_reproduce_results/work_dirs/c3d_wlasl_1_rgb
2022-12-10 11:14:14,703 - mmaction - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2022-12-10 11:14:14,703 - mmaction - INFO - workflow: [('train', 1)], max: 45 epochs
2022-12-10 11:14:14,704 - mmaction - INFO - Checkpoints will be saved to /home/sttaseen/Desktop/wlasl_reproduce_results/work_dirs/c3d_wlasl_1_rgb by HardDiskBackend.
2022-12-10 11:14:34,611 - mmaction - INFO - Epoch [1][10/141]	lr: 1.000e-03, eta: 2:33:19, time: 1.452, data_time: 0.231, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0437, loss_cls: 4.7182, loss: 4.7182, grad_norm: 25.9484
2022-12-10 11:14:46,765 - mmaction - INFO - Epoch [1][20/141]	lr: 1.000e-03, eta: 2:20:36, time: 1.215, data_time: 0.002, memory: 3489, top1_acc: 0.0437, top5_acc: 0.0563, loss_cls: 4.6778, loss: 4.6778, grad_norm: 19.8138
2022-12-10 11:14:59,021 - mmaction - INFO - Epoch [1][30/141]	lr: 1.000e-03, eta: 2:16:35, time: 1.226, data_time: 0.002, memory: 3489, top1_acc: 0.0312, top5_acc: 0.0625, loss_cls: 4.6107, loss: 4.6107, grad_norm: 13.3065
2022-12-10 11:15:11,358 - mmaction - INFO - Epoch [1][40/141]	lr: 1.000e-03, eta: 2:14:41, time: 1.234, data_time: 0.002, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0688, loss_cls: 4.6247, loss: 4.6247, grad_norm: 11.9404
2022-12-10 11:15:24,090 - mmaction - INFO - Epoch [1][50/141]	lr: 1.000e-03, eta: 2:14:17, time: 1.273, data_time: 0.002, memory: 3489, top1_acc: 0.0375, top5_acc: 0.0875, loss_cls: 4.6275, loss: 4.6275, grad_norm: 12.6667
2022-12-10 11:15:37,170 - mmaction - INFO - Epoch [1][60/141]	lr: 1.000e-03, eta: 2:14:34, time: 1.308, data_time: 0.001, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0500, loss_cls: 4.6255, loss: 4.6255, grad_norm: 13.1758
2022-12-10 11:15:50,307 - mmaction - INFO - Epoch [1][70/141]	lr: 1.000e-03, eta: 2:14:47, time: 1.314, data_time: 0.002, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0688, loss_cls: 4.6286, loss: 4.6286, grad_norm: 12.1351
2022-12-10 11:16:03,453 - mmaction - INFO - Epoch [1][80/141]	lr: 1.000e-03, eta: 2:14:54, time: 1.315, data_time: 0.001, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0563, loss_cls: 4.6479, loss: 4.6479, grad_norm: 8.8621
2022-12-10 11:16:16,634 - mmaction - INFO - Epoch [1][90/141]	lr: 1.000e-03, eta: 2:14:59, time: 1.318, data_time: 0.001, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0500, loss_cls: 4.6163, loss: 4.6163, grad_norm: 5.5713
2022-12-10 11:16:30,160 - mmaction - INFO - Epoch [1][100/141]	lr: 1.000e-03, eta: 2:15:22, time: 1.353, data_time: 0.001, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0563, loss_cls: 4.6249, loss: 4.6249, grad_norm: 5.6769
2022-12-10 11:16:44,019 - mmaction - INFO - Epoch [1][110/141]	lr: 1.000e-03, eta: 2:15:58, time: 1.386, data_time: 0.002, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0750, loss_cls: 4.6150, loss: 4.6150, grad_norm: 4.4915
2022-12-10 11:16:58,173 - mmaction - INFO - Epoch [1][120/141]	lr: 1.000e-03, eta: 2:16:40, time: 1.415, data_time: 0.001, memory: 3489, top1_acc: 0.0250, top5_acc: 0.0625, loss_cls: 4.6069, loss: 4.6069, grad_norm: 3.5836
2022-12-10 11:17:12,398 - mmaction - INFO - Epoch [1][130/141]	lr: 1.000e-03, eta: 2:17:17, time: 1.422, data_time: 0.001, memory: 3489, top1_acc: 0.0250, top5_acc: 0.0375, loss_cls: 4.6191, loss: 4.6191, grad_norm: 3.8911
2022-12-10 11:17:26,837 - mmaction - INFO - Epoch [1][140/141]	lr: 1.000e-03, eta: 2:17:56, time: 1.444, data_time: 0.002, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0500, loss_cls: 4.6150, loss: 4.6150, grad_norm: 4.2571
2022-12-10 11:17:43,730 - mmaction - INFO - Epoch [2][10/141]	lr: 1.000e-03, eta: 2:18:54, time: 1.644, data_time: 0.225, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0813, loss_cls: 4.5811, loss: 4.5811, grad_norm: 4.6503
2022-12-10 11:17:58,481 - mmaction - INFO - Epoch [2][20/141]	lr: 1.000e-03, eta: 2:19:30, time: 1.475, data_time: 0.002, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0437, loss_cls: 4.5949, loss: 4.5949, grad_norm: 6.5053
2022-12-10 11:18:13,285 - mmaction - INFO - Epoch [2][30/141]	lr: 1.000e-03, eta: 2:20:03, time: 1.480, data_time: 0.001, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0625, loss_cls: 4.5763, loss: 4.5763, grad_norm: 7.8164
2022-12-10 11:18:28,200 - mmaction - INFO - Epoch [2][40/141]	lr: 1.000e-03, eta: 2:20:34, time: 1.491, data_time: 0.001, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0375, loss_cls: 4.6261, loss: 4.6261, grad_norm: 7.2700
2022-12-10 11:18:43,123 - mmaction - INFO - Epoch [2][50/141]	lr: 1.000e-03, eta: 2:21:00, time: 1.492, data_time: 0.002, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0688, loss_cls: 4.5755, loss: 4.5755, grad_norm: 6.7947
2022-12-10 11:18:58,154 - mmaction - INFO - Epoch [2][60/141]	lr: 1.000e-03, eta: 2:21:25, time: 1.503, data_time: 0.001, memory: 3489, top1_acc: 0.0000, top5_acc: 0.0688, loss_cls: 4.5690, loss: 4.5690, grad_norm: 7.3254
2022-12-10 11:19:13,199 - mmaction - INFO - Epoch [2][70/141]	lr: 1.000e-03, eta: 2:21:47, time: 1.505, data_time: 0.002, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0500, loss_cls: 4.6003, loss: 4.6003, grad_norm: 8.3708
2022-12-10 11:19:28,316 - mmaction - INFO - Epoch [2][80/141]	lr: 1.000e-03, eta: 2:22:08, time: 1.512, data_time: 0.001, memory: 3489, top1_acc: 0.0312, top5_acc: 0.0750, loss_cls: 4.5869, loss: 4.5869, grad_norm: 7.9708
2022-12-10 11:19:43,431 - mmaction - INFO - Epoch [2][90/141]	lr: 1.000e-03, eta: 2:22:26, time: 1.511, data_time: 0.002, memory: 3489, top1_acc: 0.0312, top5_acc: 0.0938, loss_cls: 4.5522, loss: 4.5522, grad_norm: 9.2575
2022-12-10 11:19:58,633 - mmaction - INFO - Epoch [2][100/141]	lr: 1.000e-03, eta: 2:22:43, time: 1.520, data_time: 0.002, memory: 3489, top1_acc: 0.0312, top5_acc: 0.1000, loss_cls: 4.5760, loss: 4.5760, grad_norm: 9.9886
2022-12-10 11:20:13,805 - mmaction - INFO - Epoch [2][110/141]	lr: 1.000e-03, eta: 2:22:56, time: 1.517, data_time: 0.001, memory: 3489, top1_acc: 0.0375, top5_acc: 0.1000, loss_cls: 4.5408, loss: 4.5408, grad_norm: 10.3595
2022-12-10 11:20:29,094 - mmaction - INFO - Epoch [2][120/141]	lr: 1.000e-03, eta: 2:23:11, time: 1.529, data_time: 0.001, memory: 3489, top1_acc: 0.0187, top5_acc: 0.0875, loss_cls: 4.5941, loss: 4.5941, grad_norm: 13.2615
2022-12-10 11:20:44,386 - mmaction - INFO - Epoch [2][130/141]	lr: 1.000e-03, eta: 2:23:23, time: 1.529, data_time: 0.002, memory: 3489, top1_acc: 0.0375, top5_acc: 0.1062, loss_cls: 4.5855, loss: 4.5855, grad_norm: 12.7773
2022-12-10 11:20:59,704 - mmaction - INFO - Epoch [2][140/141]	lr: 1.000e-03, eta: 2:23:33, time: 1.532, data_time: 0.002, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0500, loss_cls: 4.6249, loss: 4.6249, grad_norm: 10.5704
2022-12-10 11:21:17,455 - mmaction - INFO - Epoch [3][10/141]	lr: 1.000e-03, eta: 2:23:51, time: 1.721, data_time: 0.221, memory: 3489, top1_acc: 0.0063, top5_acc: 0.0938, loss_cls: 4.5925, loss: 4.5925, grad_norm: 8.3467
2022-12-10 11:21:32,785 - mmaction - INFO - Epoch [3][20/141]	lr: 1.000e-03, eta: 2:23:58, time: 1.533, data_time: 0.002, memory: 3489, top1_acc: 0.0125, top5_acc: 0.1125, loss_cls: 4.5394, loss: 4.5394, grad_norm: 8.2170
2022-12-10 11:21:48,056 - mmaction - INFO - Epoch [3][30/141]	lr: 1.000e-03, eta: 2:24:02, time: 1.527, data_time: 0.001, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0938, loss_cls: 4.5861, loss: 4.5861, grad_norm: 7.2891
2022-12-10 11:22:03,409 - mmaction - INFO - Epoch [3][40/141]	lr: 1.000e-03, eta: 2:24:07, time: 1.535, data_time: 0.001, memory: 3489, top1_acc: 0.0125, top5_acc: 0.0563, loss_cls: 4.5116, loss: 4.5116, grad_norm: 7.6767
2022-12-10 11:22:18,760 - mmaction - INFO - Epoch [3][50/141]	lr: 1.000e-03, eta: 2:24:11, time: 1.535, data_time: 0.002, memory: 3489, top1_acc: 0.0250, top5_acc: 0.1187, loss_cls: 4.5150, loss: 4.5150, grad_norm: 9.0099
2022-12-10 11:22:34,375 - mmaction - INFO - Epoch [3][60/141]	lr: 1.000e-03, eta: 2:24:18, time: 1.561, data_time: 0.002, memory: 3489, top1_acc: 0.0000, top5_acc: 0.0750, loss_cls: 4.5761, loss: 4.5761, grad_norm: 10.4874
2022-12-10 11:22:49,883 - mmaction - INFO - Epoch [3][70/141]	lr: 1.000e-03, eta: 2:24:22, time: 1.551, data_time: 0.002, memory: 3489, top1_acc: 0.0375, top5_acc: 0.1062, loss_cls: 4.5282, loss: 4.5282, grad_norm: 10.3056
2022-12-10 11:23:05,478 - mmaction - INFO - Epoch [3][80/141]	lr: 1.000e-03, eta: 2:24:27, time: 1.559, data_time: 0.001, memory: 3489, top1_acc: 0.0250, top5_acc: 0.0938, loss_cls: 4.4829, loss: 4.4829, grad_norm: 10.8287
2022-12-10 11:23:21,227 - mmaction - INFO - Epoch [3][90/141]	lr: 1.000e-03, eta: 2:24:32, time: 1.575, data_time: 0.001, memory: 3489, top1_acc: 0.0125, top5_acc: 0.1125, loss_cls: 4.4865, loss: 4.4865, grad_norm: 10.8124
